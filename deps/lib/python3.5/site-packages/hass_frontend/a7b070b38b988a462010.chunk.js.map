{"version":3,"sources":["webpack:///./src/panels/map/ha-entity-marker.js","webpack:///./src/panels/map/ha-panel-map.js"],"names":["customElements","define","Object","events_mixin","a","polymer_element","template","html_tag","properties","hass","type","entityId","String","value","entityName","entityPicture","ready","super","this","addEventListener","ev","badgeTap","stopPropagation","fire","leaflet_src_default","Icon","Default","imagePath","localize_mixin","observer","narrow","Boolean","showMenu","connectedCallback","map","_map","$","style","document","createElement","setAttribute","parentNode","appendChild","setView","tileLayer","Browser","retina","attribution","subdomains","minZoom","maxZoom","addTo","drawEntities","setTimeout","invalidateSize","fitMap","bounds","_mapItems","length","LatLng","config","core","latitude","longitude","latLngBounds","item","getLatLng","fitBounds","pad","forEach","marker","remove","mapItems","keys","states","entity","title","compute_state_name","attributes","hidden","compute_state_domain","state","icon","passive","iconHTML","divIcon","html","iconSize","className","push","interactive","circle","color","radius","entity_picture","split","part","substr","join","entity_id","gps_accuracy"],"mappings":"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","file":"a7b070b38b988a462010.chunk.js","sourcesContent":["import '@polymer/iron-image/iron-image.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport EventsMixin from '../../mixins/events-mixin.js';\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaEntityMarker extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n    <style include=\"iron-positioning\"></style>\n    <style>\n    .marker {\n      vertical-align: top;\n      position: relative;\n      display: block;\n      margin: 0 auto;\n      width: 2.5em;\n      text-align: center;\n      height: 2.5em;\n      line-height: 2.5em;\n      font-size: 1.5em;\n      border-radius: 50%;\n      border: 0.1em solid var(--ha-marker-color, var(--default-primary-color));\n      color: rgb(76, 76, 76);\n      background-color: white;\n    }\n    iron-image {\n      border-radius: 50%;\n    }\n    </style>\n\n    <div class=\"marker\">\n      <template is=\"dom-if\" if=\"[[entityName]]\">[[entityName]]</template>\n      <template is=\"dom-if\" if=\"[[entityPicture]]\">\n        <iron-image sizing=\"cover\" class=\"fit\" src=\"[[entityPicture]]\"></iron-image>\n      </template>\n    </div>\n`;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      entityId: {\n        type: String,\n        value: '',\n      },\n\n      entityName: {\n        type: String,\n        value: null,\n      },\n\n      entityPicture: {\n        type: String,\n        value: null,\n      }\n    };\n  }\n\n  ready() {\n    super.ready();\n    this.addEventListener('click', ev => this.badgeTap(ev));\n  }\n\n  badgeTap(ev) {\n    ev.stopPropagation();\n    if (this.entityId) {\n      this.fire('hass-more-info', { entityId: this.entityId });\n    }\n  }\n}\n\ncustomElements.define('ha-entity-marker', HaEntityMarker);\n","import '@polymer/app-layout/app-toolbar/app-toolbar.js';\nimport '@polymer/iron-icon/iron-icon.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport Leaflet from 'leaflet';\n\nimport '../../components/ha-menu-button.js';\n\nimport './ha-entity-marker.js';\n\nimport computeStateDomain from '../../common/entity/compute_state_domain.js';\nimport computeStateName from '../../common/entity/compute_state_name.js';\nimport LocalizeMixin from '../../mixins/localize-mixin.js';\n\nLeaflet.Icon.Default.imagePath = '/static/images/leaflet';\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaPanelMap extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n    <style include=\"ha-style\">\n      #map {\n        height: calc(100% - 64px);\n        width: 100%;\n        z-index: 0;\n      }\n    </style>\n\n    <app-toolbar>\n      <ha-menu-button narrow='[[narrow]]' show-menu='[[showMenu]]'></ha-menu-button>\n      <div main-title>[[localize('panel.map')]]</div>\n    </app-toolbar>\n\n    <div id='map'></div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n        observer: 'drawEntities',\n      },\n\n      narrow: {\n        type: Boolean,\n      },\n\n      showMenu: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    var map = this._map = Leaflet.map(this.$.map);\n    var style = document.createElement('link');\n    style.setAttribute('href', '/static/images/leaflet/leaflet.css');\n    style.setAttribute('rel', 'stylesheet');\n    this.$.map.parentNode.appendChild(style);\n    map.setView([51.505, -0.09], 13);\n    Leaflet.tileLayer(\n      `https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}${Leaflet.Browser.retina ? '@2x.png' : '.png'}`,\n      {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n        subdomains: 'abcd',\n        minZoom: 0,\n        maxZoom: 20,\n      }\n    ).addTo(map);\n\n    this.drawEntities(this.hass);\n\n    setTimeout(() => {\n      map.invalidateSize();\n      this.fitMap();\n    }, 1);\n  }\n\n  fitMap() {\n    var bounds;\n\n    if (this._mapItems.length === 0) {\n      this._map.setView(\n        new Leaflet.LatLng(this.hass.config.core.latitude, this.hass.config.core.longitude),\n        14\n      );\n    } else {\n      bounds = new Leaflet.latLngBounds(this._mapItems.map(item => item.getLatLng()));\n      this._map.fitBounds(bounds.pad(0.5));\n    }\n  }\n\n  drawEntities(hass) {\n    /* eslint-disable vars-on-top */\n    var map = this._map;\n    if (!map) return;\n\n    if (this._mapItems) {\n      this._mapItems.forEach(function (marker) { marker.remove(); });\n    }\n    var mapItems = this._mapItems = [];\n\n    Object.keys(hass.states).forEach(function (entityId) {\n      var entity = hass.states[entityId];\n      var title = computeStateName(entity);\n\n      if ((entity.attributes.hidden &&\n          computeStateDomain(entity) !== 'zone') ||\n          entity.state === 'home' ||\n          !('latitude' in entity.attributes) ||\n          !('longitude' in entity.attributes)) {\n        return;\n      }\n\n      var icon;\n\n      if (computeStateDomain(entity) === 'zone') {\n        // DRAW ZONE\n        if (entity.attributes.passive) return;\n\n        // create icon\n        var iconHTML = '';\n        if (entity.attributes.icon) {\n          iconHTML = (\n            \"<iron-icon icon='\" + entity.attributes.icon + \"'></iron-icon>\");\n        } else {\n          iconHTML = title;\n        }\n\n        icon = Leaflet.divIcon({\n          html: iconHTML,\n          iconSize: [24, 24],\n          className: '',\n        });\n\n        // create market with the icon\n        mapItems.push(Leaflet.marker(\n          [entity.attributes.latitude, entity.attributes.longitude],\n          {\n            icon: icon,\n            interactive: false,\n            title: title,\n          }\n        ).addTo(map));\n\n        // create circle around it\n        mapItems.push(Leaflet.circle(\n          [entity.attributes.latitude, entity.attributes.longitude],\n          {\n            interactive: false,\n            color: '#FF9800',\n            radius: entity.attributes.radius,\n          }\n        ).addTo(map));\n\n        return;\n      }\n\n      // DRAW ENTITY\n      // create icon\n      var entityPicture = entity.attributes.entity_picture || '';\n      var entityName = title.split(' ').map(function (part) { return part.substr(0, 1); }).join('');\n      /* Leaflet clones this element before adding it to the map. This messes up\n         our Polymer object and we can't pass data through. Thus we hack like this. */\n      icon = Leaflet.divIcon({\n        html: \"<ha-entity-marker entity-id='\" + entity.entity_id + \"' entity-name='\" + entityName + \"' entity-picture='\" + entityPicture + \"'></ha-entity-marker>\",\n        iconSize: [45, 45],\n        className: '',\n      });\n\n      // create market with the icon\n      mapItems.push(Leaflet.marker(\n        [entity.attributes.latitude, entity.attributes.longitude],\n        {\n          icon: icon,\n          title: computeStateName(entity),\n        }\n      ).addTo(map));\n\n      // create circle around if entity has accuracy\n      if (entity.attributes.gps_accuracy) {\n        mapItems.push(Leaflet.circle(\n          [entity.attributes.latitude, entity.attributes.longitude],\n          {\n            interactive: false,\n            color: '#0288D1',\n            radius: entity.attributes.gps_accuracy,\n          }\n        ).addTo(map));\n      }\n    });\n  }\n}\n\ncustomElements.define('ha-panel-map', HaPanelMap);\n"],"sourceRoot":""}